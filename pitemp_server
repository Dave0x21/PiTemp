#!/usr/bin/env python3

import datetime
import logging
import signal
import sqlite3
import sys
from threading import Event, Thread
from time import sleep

from flask import (Flask, jsonify, render_template,
                   request, send_from_directory)
from werkzeug.serving import make_server

RESPONSE = {'time': [], 'temp': [], 'humidity': [], 'light': [], 'pressure': [], 'trend': [],
            'min_max': {"temp": [0, 0], "humidity": [0, 0], "light": [0, 0], "pressure": [0, 0]},
            'media': {"temp": 0, "humidity": 0, "light": 0, "pressure": 0}}
DB = "/etc/pitemp/pitemp.db"


logging.basicConfig(level=logging.DEBUG)

# for triggering the shutdown procedure when a signal is detected
keyboard_trigger = Event()


def signal_handler(signal, frame):
    logging.info('Signal detected. Stopping threads.')
    keyboard_trigger.set()


DIRECTORY_PATH = 'static'
HOST = "0.0.0.0"
WEB_PORT = 80
app = Flask(__name__, static_url_path='')


class WebServerThread(Thread):
    '''
    Class to make the launch of the flask server non-blocking.
    Also adds shutdown functionality to it.
    '''

    def __init__(self, app, host, port):
        Thread.__init__(self)
        self.srv = make_server(host, port, app)
        self.ctx = app.app_context()
        self.ctx.push()

    def run(self):
        logging.info('Starting PiTemp server')
        self.srv.serve_forever()

    def shutdown(self):
        logging.info('Stopping PiTemp server')
        self.srv.shutdown()


def dict_factory(cursor, row):
    global RESPONSE
    for idx, col in enumerate(cursor.description):
        RESPONSE[col[0]].append(row[idx])
    return RESPONSE


def get_data(query):
    global RESPONSE

    RESPONSE = {'time': [], 'temp': [], 'humidity': [], 'light': [], 'pressure': [], 'trend': [],
                'min_max': {"temp": [0, 0], "humidity": [0, 0], "light": [0, 0], "pressure": [0, 0]},
                'media': {"temp": 0, "humidity": 0, "light": 0, "pressure": 0}}

    conn = sqlite3.connect(DB)
    conn.row_factory = dict_factory
    c = conn.cursor()
    c.execute(query)
    c.fetchall()

    try:
        tot = float(len(RESPONSE['time']))
        
        for item in ('temp', 'humidity', 'light', 'pressure'):
            RESPONSE['media'][item] = "{:.1f}".format(sum(RESPONSE[item]) / tot)
            RESPONSE['min_max'][item] = [min(RESPONSE[item]), max(RESPONSE[item])]
    except ZeroDivisionError:
        RESPONSE['media'] = {"temp": 0, "humidity": 0, "light": 0, "pressure": 0}
        RESPONSE['min_max'] = {"temp": [0, 0], "humidity": [0, 0], "light": [0, 0], "pressure": [0, 0]}


@app.route("/")
def index():
    global RESPONSE

    get_data("SELECT time, temp, humidity, light, pressure, trend FROM pitemp WHERE time >= datetime('now', '-24 hours', 'localtime')")
    return render_template("index.html", response=RESPONSE)


@app.route("/day_view", methods=['GET', 'POST'])
def day_view():
    global RESPONSE

    if request.method == 'POST':
        date = request.get_data().decode()
        query = "SELECT time, temp, humidity, light, pressure, trend from pitemp WHERE (time LIKE '{}%')".format(date)
        get_data(query)

        return jsonify(RESPONSE), 200
    else:
        query = "SELECT time, temp, humidity, light, pressure, trend from pitemp WHERE time BETWEEN date('now', '-1 days', 'localtime') AND date('now', 'localtime')"
        get_data(query)

        return render_template("day.html", response=RESPONSE)


@app.route("/custom_view", methods=['GET', 'POST'])
def custom_view():
    global RESPONSE

    if request.method == 'POST':
        date = eval(request.get_data().decode())

        query = "SELECT time, temp, humidity, light, pressure, trend from pitemp WHERE time BETWEEN date('{}') AND date('{}')".format(date['start'], date['end'])
        get_data(query)

        return jsonify(RESPONSE), 200
    else:
        query = "SELECT time, temp, humidity, light, pressure, trend FROM pitemp WHERE time >= datetime('now', '-6 days', 'localtime')"
        get_data(query)

        return render_template("custom_range.html", response=RESPONSE)


@app.route("/static/<path:path>")
def send_static(path):
    return send_from_directory(DIRECTORY_PATH, path)


if __name__ == "__main__":
    # registering both types of signals
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    # starting the web server
    webserver = WebServerThread(app, HOST, WEB_PORT)
    webserver.start()
    logging.info("Started PiTemp web server")

    # and run it indefinitely
    while not keyboard_trigger.is_set():
        sleep(0.5)

    # until some keyboard event is detected
    logging.info("Keyboard event detected")

    # trigger shutdown procedure
    webserver.shutdown()

    # and finalize shutting them down
    webserver.join()
    logging.info("Stopped all threads")

    sys.exit(0)
